'''This handles all request to /users route.
Imports  User, UserSchema
'''

from database import User, UserSchema, db
from flask import make_response, jsonify, request
from marshmallow.exceptions import *
from http import HTTPStatus
from app import app
from flask_jwt_extended import create_access_token
from flask_jwt_extended import get_jwt
from flask_jwt_extended import jwt_required
from flask_jwt_extended import JWTManager


jwt = JWTManager(app)

@app.route('/api/users', methods=['GET'])
def get_all_users():

    # To be refactored.

    #This is SQL statement for getting all values in the Room table
    #   - Generated by SQLAlchemy
    get_users = User.query.all()
    # The Schema
    user_schema = UserSchema(many=True)

  
    try:
        users = user_schema.dump(get_users)
    except ValidationError as exec:
        return {
            'message' : "Validation errors", 'errors': exec.messages
        }, HTTPStatus.BAD_REQUEST

    
    return make_response(jsonify({"users": users}))

@app.route('/api/users', methods=['POST'])
def create_user():
    # print(request)
    data = request.json
    user_schema = UserSchema() # This is the only line that changes
    try:
        user = user_schema.load(data)
        print('Here')
    except Exception as exec:
        # print(exec)
        return {
            'message' : "Validation errors",
        }, HTTPStatus.BAD_REQUEST

    result = user_schema.dump(user.create())
    return make_response(jsonify({"user": result }))


@app.route('/api/profile')
@jwt_required()
def get_profile():

    data = get_jwt()
    # print(data)
    return make_response(jsonify(data))
